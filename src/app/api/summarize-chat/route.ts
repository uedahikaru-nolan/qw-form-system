import { NextRequest, NextResponse } from 'next/server'
import OpenAI from 'openai'
import { ChatMessage } from '@/types'

const openai = new OpenAI({
  apiKey: process.env.OPENAI_API_KEY,
})

export async function POST(request: NextRequest) {
  try {
    // APIキーの存在確認
    if (!process.env.OPENAI_API_KEY) {
      console.error('OPENAI_API_KEY is not set')
      return NextResponse.json(
        { error: 'OpenAI API key is not configured' },
        { status: 500 }
      )
    }
    
    const { chatHistory, siteType, industry } = await request.json()
    
    const systemPrompt = `あなたは会話内容を要約・整理する専門家です。
以下のチャット履歴から、${industry}の${siteType}作成に関する重要な情報を整理してください。

以下の形式で整理してください：

## 📋 収集した情報のまとめ

### 基本情報
- 明確に提供された情報を箇条書きで記載

### 作成予定のコンテンツ
- どのようなサイトを作成するか
- 主要な特徴や強み
- ターゲットユーザー（わかる場合）

### 追加で必要な情報
- まだ収集されていない重要な情報
- 後で追加・編集が推奨される項目

## 🏗️ ${siteType === 'HP' ? 'ホームページ' : siteType === 'LP' ? 'ランディングページ' : siteType === 'PORTFOLIO' ? 'ポートフォリオサイト' : 'Webシステム'}構成の提案

### 推奨ページ構成

チャット履歴から得られた情報をもとに、各ページの具体的なコピーテキストを含めて提案してください。
${siteType === 'HP' ? `
- **ホーム** - 第一印象を決める重要なページ
  - ヒーローセクション
    - キャッチコピー: 「（チャット履歴から業種・特徴を踏まえた印象的なキャッチコピーを生成）」
    - サブコピー: 「（ユーザーのベネフィットを示す具体的なサブコピー）」
    - 説明文: （100-150文字程度で事業の特徴を説明）
  - サービス/商品の概要
    - 見出し: 「私たちができること」または業種に合わせた見出し
    - 本文: （提供サービスの特徴を3つのポイントで説明）
  - お客様の声や実績
    - 見出し: 「お客様からの評価」
    - 内容: （信頼性を高める実績や評価を記載）
  - CTAボタン
    - ボタンテキスト: 「無料相談はこちら」「今すぐ問い合わせる」など

- **${industry}について** - 信頼性を高めるページ
  - 事業理念・コンセプト
    - 見出し: 「私たちの想い」
    - 本文: （チャット履歴から抽出した理念や想いを200文字程度で）
  - 特徴・強み
    - 見出し: 「選ばれる3つの理由」
    - 内容: （具体的な強みを箇条書きで）
  - 代表挨拶やスタッフ紹介
    - 見出し: 「代表からのメッセージ」
    - 本文: （人柄が伝わる温かいメッセージ）

- **メニュー/サービス** - 詳細情報ページ
  - 提供サービス/商品の詳細
    - 各サービスの説明文を具体的に記載
  - 料金表（該当する場合）
    - 分かりやすい料金体系の説明
  - よくある質問
    - 業種特有のFAQを5-7個程度

- **ブログ/お知らせ** - 更新性のあるコンテンツ
  - 最新情報の見出し例
  - カテゴリー設定の提案
  - 更新頻度の推奨

- **アクセス/お問い合わせ** - アクションを促すページ
  - アクセス情報の記載方法
  - フォームの項目設定
  - 電話番号の見せ方
  - 営業時間の表示方法
` : siteType === 'LP' ? `
- **ファーストビュー**
  - キャッチコピー: 「（チャット履歴から最もインパクトのあるメッセージを生成）」
  - ベネフィット: 「（顧客が得られる具体的な価値を3つ程度）」
  - CTAボタン: 「今すぐ始める」「無料で試す」など

- **課題提起セクション**
  - 見出し: 「こんなお悩みはありませんか？」
  - 悩みリスト: （ターゲットの具体的な悩み3-5個）
  - 共感メッセージ: （「その気持ち、よくわかります」など）

- **解決策の提示**
  - 見出し: 「（商品名）があなたの悩みを解決します」
  - 3つの特徴: （具体的な特徴とそのメリット）
  - 他社との違い: （独自の強みを明確に）

- **実績・お客様の声**
  - 数値実績: 「○○%の方が満足」など
  - お客様の声: （具体的な成功体験談2-3件）
  - ビフォーアフター: （視覚的に分かりやすい変化）

- **料金・申込みセクション**
  - 価格表示: 「月額○○円から」
  - 特別オファー: 「今だけの特典」
  - CTAボタン: 「申し込みはこちら」
` : siteType === 'PORTFOLIO' ? `
- **トップページ**
  - キャッチコピー: 「（クリエイターとしての一番の強みを表現）」
  - 自己紹介: （100-150文字で経験と専門性をアピール）
  - スキルセット: （主要スキルを箇条書きで）
  - 代表作品: 「最近のプロジェクト」など

- **作品ギャラリー**
  - セクションタイトル: 「Works」「制作実績」など
  - カテゴリー: （Webデザイン、グラフィック、その他）
  - 作品説明: （各作品のコンセプトと工夫点）

- **プロフィール**
  - 見出し: 「About Me」「プロフィール」
  - 経歴: （時系列で主要な経験を記載）
  - 実績: （数値や具体的な成果）
  - 強み: （他のクリエイターとの差別化ポイント）

- **コンタクト**
  - 見出し: 「お仕事のご依頼はこちら」
  - メッセージ: 「お気軽にご相談ください」
  - 対応可能な仕事: （具体的なサービス内容）
  - 料金目安: 「○○円〜」
` : `
- **ダッシュボード**
  - ウェルカムメッセージ: 「おかえりなさい、（ユーザー名）さん」
  - 主要指標: （重要なKPIを3-4個表示）
  - クイックアクセス: （よく使う機能へのショートカット）
  - お知らせ: （最新のアップデート情報）

- **主要機能ページ**
  - 機能名: （チャット履歴から抽出した主要機能）
  - 機能説明: （各機能の使い方とメリット）
  - 操作ガイド: 「ステップ1: ○○をクリック」など
  - ヘルプテキスト: 「お困りの時は...」

- **設定・管理**
  - ユーザー設定: 「プロフィール編集」「通知設定」など
  - データ管理: 「エクスポート」「バックアップ」機能
  - セキュリティ: 「パスワード変更」「二段階認証」
`}

### デザインの方向性
- 収集した情報に基づいた具体的なデザイン提案
- カラースキーム、フォント、レイアウトの提案
- ターゲットユーザーに響くビジュアル戦略

### SEO・マーケティング戦略
- 効果的なキーワード戦略
- コンテンツマーケティングの提案
- SNS連携の活用方法

重要：推奨ページ構成の中に、チャット履歴から得られた情報を活用して、各セクションの具体的なコピーテキストを含めてください。
読みやすく、構造化された形式で出力してください。`

    const chatContent = chatHistory.map((msg: ChatMessage) => 
      `${msg.role === 'user' ? 'ユーザー' : 'AI'}: ${msg.content}`
    ).join('\n\n')

    const completion = await openai.chat.completions.create({
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
          content: systemPrompt
        },
        {
          role: 'user',
          content: `チャット履歴:\n${chatContent}\n\n上記の会話を整理・要約してください。`
        }
      ],
      temperature: 0.7,
      max_tokens: 3500,
    })

    const summary = completion.choices[0].message.content || ''
    
    return NextResponse.json({ summary })
  } catch (error: any) {
    console.error('Chat summarization error:', error)
    
    // クォータエラーの場合は特別なメッセージ
    if (error?.code === 'insufficient_quota' || error?.error?.code === 'insufficient_quota') {
      return NextResponse.json(
        { error: 'API使用量の上限に達しました。' },
        { status: 500 }
      )
    }
    
    return NextResponse.json(
      { error: 'Failed to summarize chat' },
      { status: 500 }
    )
  }
}